name: Deploy to Oracle Cloud

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run linting
        working-directory: ./backend
        run: npm run lint
      
      - name: Run tests
        working-directory: ./backend
        run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: production

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ORACLE_SSH_KEY }}
      
      - name: Add Oracle Cloud to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create .env file
        run: |
          cat > .env.prod << EOF
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          NODE_ENV=production
          PORT=3000
          EOF
      
      - name: Deploy to Oracle Cloud
        env:
          ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
          ORACLE_USER: ${{ secrets.ORACLE_USER }}
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        run: |
          # Upload files
          scp -r docker-compose.prod.yml nginx .env.prod $ORACLE_USER@$ORACLE_HOST:~/dietreinoAI/
          
          # Deploy application
          ssh $ORACLE_USER@$ORACLE_HOST << 'ENDSSH'
            cd ~/dietreinoAI
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Update docker-compose to use built image
            sed -i "s|build:|#build:|g" docker-compose.prod.yml
            sed -i "s|context: ./backend|#context: ./backend|g" docker-compose.prod.yml  
            sed -i "s|dockerfile: Dockerfile|#dockerfile: Dockerfile|g" docker-compose.prod.yml
            sed -i "s|target: production|#target: production|g" docker-compose.prod.yml
            sed -i "/backend:/a\\    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" docker-compose.prod.yml
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down --remove-orphans || true
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Start services
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services
            sleep 30
            
            # Run migrations
            docker-compose -f docker-compose.prod.yml exec -T backend npm run migration:run || true
            
            # Cleanup old images
            docker image prune -f
          ENDSSH
      
      - name: Health check
        env:
          ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
        run: |
          sleep 10
          curl -f http://$ORACLE_HOST:3000/graphql || exit 1
          echo "✅ Deploy successful!"

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment to Oracle Cloud was successful!"
          else
            echo "❌ Deployment failed. Check the logs above."
            exit 1
          fi