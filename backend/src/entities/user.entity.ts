import { Entity, Column, OneToMany, ManyToOne, JoinColumn } from 'typeorm';
import { Workout } from './workout.entity';
import { UserRole } from '../utils/roles.enum';
import { ObjectType, Field, ID } from '@nestjs/graphql';
import { BaseEntity } from '../utils/base/base.entity';

@ObjectType()
@Entity('users')
export class User extends BaseEntity {
  @Field()
  @Column()
  name: string;

  @Field()
  @Column({ unique: true })
  email: string;

  @Column()
  password: string;

  @Field({ nullable: true })
  @Column({ name: 'phone', nullable: true })
  phone: string;

  @Field(() => [Workout], { nullable: true })
  @OneToMany(() => Workout, (workout) => workout.user)
  workouts: Workout[];

  @Field()
  @Column({ name: 'is_password_auto_generated', default: false })
  isPasswordAutoGenerated: boolean;

  @Field(() => UserRole)
  @Column({
    name: 'role',
    type: 'enum',
    enum: UserRole,
    default: UserRole.CLIENT,
  })
  role: UserRole;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'trainer_id' })
  trainer: User;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'nutritionist_id' })
  nutritionist: User;
}
