version: '3.8'

services:
  # Database PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: dietreino-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - dietreino-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API (NestJS + GraphQL) - Production
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
      target: production
    container_name: dietreino-backend-prod
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DB_USERNAME}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRES_IN: ${JWT_ACCESS_EXPIRES_IN}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      PORT: 3000
    networks:
      - dietreino-network
    restart: unless-stopped

  # Frontend (Vue.js) - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: dietreino-frontend-prod
    ports:
      - "3001:3000"
    depends_on:
      - backend
    environment:
      NODE_ENV: production
    networks:
      - dietreino-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dietreino-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - dietreino-network
    restart: unless-stopped

networks:
  dietreino-network:
    driver: bridge

volumes:
  postgres_prod_data: